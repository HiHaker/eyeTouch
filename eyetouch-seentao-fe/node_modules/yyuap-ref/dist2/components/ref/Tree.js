'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _tree = require('../../bee/tree');

var _tree2 = _interopRequireDefault(_tree);

var _icon = require('../../bee/icon');

var _icon2 = _interopRequireDefault(_icon);

var _checkbox = require('../../bee/checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

var _loading = require('../../bee/loading');

var _loading2 = _interopRequireDefault(_loading);

var _reactCustomScrollbars = require('react-custom-scrollbars');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TreeNode = _tree2.default.TreeNode;

var RefTree = function (_Component) {
  _inherits(RefTree, _Component);

  function RefTree(props) {
    _classCallCheck(this, RefTree);

    var _this = _possibleConstructorReturn(this, (RefTree.__proto__ || Object.getPrototypeOf(RefTree)).call(this, props));

    _this.onMouseEnter = function (e) {
      _this.setState({
        isHover: e.node.props.eventKey
      });
    };

    _this.onDoubleClick = function (record, index, event) {
      _this.props.onDoubleClick(record, index, event);
    };

    _this.onMouseLeave = function (e, treenode) {
      _this.setState({
        isHover: "",
        editKey: ""
      });
    };

    _this.state = {
      isHover: "",
      editKey: "",
      checkedKey: []
    };
    return _this;
  }

  _createClass(RefTree, [{
    key: 'checkAllchildren',
    value: function checkAllchildren(v, id) {
      console.log(v);
      var _state = this.state,
          checkedKey = _state.checkedKey,
          isHover = _state.isHover;
      var checkedKeys = this.props.checkedKeys;
      // if(v){
      //   checkedKey.indexOf(id) ==-1 ? checkedKey.push(id): false
      // }else{
      //   checkedKey = checkedKey.filter(item=>{
      //          return item != id
      //    })
      // }

      // this.setState({
      //   checkedKey:checkedKeys
      // })

      this.props.checkAllchildrenFun(v, id);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          data = _props.data,
          parentNodeDisableCheck = _props.parentNodeDisableCheck,
          language = _props.language,
          checkedKeys = _props.checkedKeys,
          loading = _props.loading;
      var checkedKey = this.state.checkedKey;

      var lowerlevel = "包含下级";
      switch (language) {
        case "zh_CN":
          lowerlevel = '包含下级';

          break;
        case "en_US":
          lowerlevel = 'Lower-level';
          break;
        case "zh_TW":
          lowerlevel = '包含下級';
          break;
        case "fr_FR":
          lowerlevel = 'Inférieur';
          break;
        case "de_DE":
          lowerlevel = 'Untergebenen';
          break;
        case "ja_JP":
          lowerlevel = '下級を含む';
          break;
        default:
          lowerlevel = '包含下级';
      }
      var crenderTreeTitle = function crenderTreeTitle(item) {
        if (_this2.state.isHover == item.id || !item.isChildNode && checkedKeys.indexOf(item.id) > -1 && item.refpk.indexOf('child://') > -1 || !item.isChildNode && item.checkAllChildren) {
          return _react2.default.createElement(
            'div',
            { className: 'title-con' },
            _react2.default.createElement(
              'span',
              null,
              item.refname
            ),
            _react2.default.createElement(
              _checkbox2.default,
              { className: 'ref-tree-checkbox',
                onClick: function onClick(e) {
                  return e.stopPropagation();
                },
                checked: item.checkAllChildren,
                onChange: function onChange(value) {
                  return _this2.checkAllchildren(value, item.id);
                } },
              lowerlevel
            ),
            item.checkAllChildren ? _react2.default.createElement('i', { className: 'Treepoint' }) : null
          );
        } else {
          return _react2.default.createElement(
            'div',
            { className: 'title-con' },
            _react2.default.createElement(
              'span',
              null,
              item.refname
            )
          );
        }
      };
      var loop = function loop(datas) {
        return datas.map(function (item) {
          if (item.children && item.children.length) {
            return _react2.default.createElement(
              TreeNode,
              { key: item.id, title: item.refname, paramitem: item, disableCheckbox: parentNodeDisableCheck },
              loop(item.children)
            );
          }
          return _react2.default.createElement(TreeNode, { key: item.id, title: item.refname, paramitem: item, isLeaf: item.isLeaf });
        });
      };
      var loopCheckChildren = function loopCheckChildren(datas) {
        return datas.map(function (item) {
          if (!_this2.props.treeloadData) {
            if (item.children && item.children.length) {
              return _react2.default.createElement(
                TreeNode,
                { key: item.id, paramitem: item, title: crenderTreeTitle(item), disableCheckbox: item.parentNodeDisableCheck },
                loopCheckChildren(item.children)
              );
            }
          } else {
            if (item.children) {
              return _react2.default.createElement(
                TreeNode,
                { key: item.id, paramitem: item, title: crenderTreeTitle(item), disableCheckbox: item.parentNodeDisableCheck },
                loopCheckChildren(item.children)
              );
            }
          }

          return _react2.default.createElement(TreeNode, { key: item.id, paramitem: item, title: crenderTreeTitle(item), isLeaf: item.isLeaf, onMouseEnter: _this2.onMouseEnter, disableCheckbox: item.parentNodeDisableCheck });
        });
      };
      var looploadData = function looploadData(datas) {
        return datas.map(function (item) {
          if (item.children && item.children.length) {
            return _react2.default.createElement(
              TreeNode,
              { key: item.id, paramitem: item, title: item.refname, disableCheckbox: parentNodeDisableCheck },
              looploadData(item.children)
            );
          }
          return _react2.default.createElement(TreeNode, { key: item.id, paramitem: item, title: item.refname, isLeaf: item.isLeaf });
        });
      };
      return _react2.default.createElement(
        'div',
        { className: 'c-tree' },
        _react2.default.createElement(
          _reactCustomScrollbars.Scrollbars,
          { autoHeightMin: 300, className: 'treetable_scroll' },
          this.props.treeloadData ? _react2.default.createElement(
            _tree2.default,
            _extends({}, this.props, {
              openIcon: _react2.default.createElement(_icon2.default, { type: this.props.openIconClassName || 'uf-triangle-down' }),
              closeIcon: _react2.default.createElement(_icon2.default, { type: this.props.closeIconClassName || 'uf-triangle-right' }),
              onMouseLeave: this.onMouseLeave,
              className: loading ? 'loading' : '',
              expandedKeys: this.props.expandedKeysList,
              onMouseEnter: this.onMouseEnter,
              onDoubleClick: this.onDoubleClick.bind(this),
              loadData: this.props.onLoadData }),
            !this.props.checkAllChildren ? looploadData(data) : loopCheckChildren(data)
          ) : _react2.default.createElement(
            _tree2.default,
            _extends({}, this.props, {
              className: loading ? 'loading' : '',
              openIcon: _react2.default.createElement(_icon2.default, { type: this.props.openIconClassName || 'uf-triangle-down' }),
              closeIcon: _react2.default.createElement(_icon2.default, { type: this.props.closeIconClassName || 'uf-triangle-right' }),
              onMouseLeave: this.onMouseLeave,
              onMouseEnter: this.onMouseEnter,
              onDoubleClick: this.onDoubleClick.bind(this)
            }),
            !this.props.checkAllChildren ? loop(data) : loopCheckChildren(data)
          )
        ),
        _react2.default.createElement(_loading2.default, { container: this, show: loading })
      );
    }
  }]);

  return RefTree;
}(_react.Component);

exports.default = RefTree;
module.exports = exports['default'];