'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _button = require('../../bee/button');

var _button2 = _interopRequireDefault(_button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RefButton = function (_Component) {
  _inherits(RefButton, _Component);

  function RefButton(props) {
    _classCallCheck(this, RefButton);

    var _this = _possibleConstructorReturn(this, (RefButton.__proto__ || Object.getPrototypeOf(RefButton)).call(this, props));

    _this.onClick = function (type) {
      _this.props.onClickBtn(type);
    };

    _this.state = {};
    return _this;
  }

  _createClass(RefButton, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          hasPage = _props.hasPage,
          buttonText = _props.buttonText,
          ishasemptyBtn = _props.ishasemptyBtn,
          language = _props.language;

      var saveButton = "确认";
      var cancelButton = "取消";
      var clearButton = "清空已选";
      if (buttonText) {
        saveButton = buttonText.ok;
        cancelButton = buttonText.cancel;
      }
      switch (language) {
        case "zh_CN":

          clearButton = '清空已选';
          break;
        case "en_US":
          saveButton = 'Ok';
          cancelButton = 'Cancel';
          clearButton = 'Empty';
          break;
        case "zh_TW":
          saveButton = '確認';
          clearButton = '清空已選';
          break;
        case "fr_FR":
          saveButton = 'Confirmation';
          cancelButton = 'Annuler';
          clearButton = 'Videz';
          break;
        case "de_DE":
          saveButton = 'Bestätigt';
          cancelButton = 'Abgesagt';
          clearButton = 'Leer';
          break;
        case "ja_JP":
          saveButton = '確認する';
          cancelButton = '取り消す';
          clearButton = '空を清める';
          break;
        default:

          clearButton = '清空已选';
      }

      return _react2.default.createElement(
        'div',
        { className: hasPage ? 'hasPage' : '' },
        _react2.default.createElement('div', { className: 'btnmargintop', style: { marginTop: '40px' } }),
        _react2.default.createElement(
          'div',
          { className: 'Ref-Button' },
          ishasemptyBtn ? _react2.default.createElement(
            'button',
            { className: 'cancelButton emptyBtn', onClick: function onClick() {
                return _this2.onClick('empty');
              } },
            clearButton
          ) : null,
          _react2.default.createElement(
            'button',
            { className: 'cancelButton', onClick: function onClick() {
                return _this2.onClick('cancel');
              } },
            cancelButton
          ),
          _react2.default.createElement(
            _button2.default,
            { className: 'saveButton', colors: 'danger', onClick: function onClick() {
                return _this2.onClick('save');
              } },
            saveButton
          )
        )
      );
    }
  }]);

  return RefButton;
}(_react.Component);

exports.default = RefButton;
module.exports = exports['default'];