'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('../../utils');

var _RefList = require('./RefList');

var _RefList2 = _interopRequireDefault(_RefList);

var _RefSearch = require('./RefSearch');

var _RefSearch2 = _interopRequireDefault(_RefSearch);

var _RefButton = require('./RefButton');

var _RefButton2 = _interopRequireDefault(_RefButton);

var _RefTable = require('./RefTable');

var _RefTable2 = _interopRequireDefault(_RefTable);

var _Tab = require('./Tab');

var _Tab2 = _interopRequireDefault(_Tab);

var _Tree = require('./Tree');

var _Tree2 = _interopRequireDefault(_Tree);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var components = {
  RefList: _RefList2.default,
  RefSearch: _RefSearch2.default,
  RefButton: _RefButton2.default,
  Tree: _Tree2.default,
  RefTable: _RefTable2.default,
  Tab: _Tab2.default
};

var Ref = function (_Component) {
  _inherits(Ref, _Component);

  function Ref() {
    _classCallCheck(this, Ref);

    return _possibleConstructorReturn(this, (Ref.__proto__ || Object.getPrototypeOf(Ref)).apply(this, arguments));
  }

  _createClass(Ref, [{
    key: 'componentWillMount',

    /*
    constructor(props) {
      super(props);
      this.state = {
        data: props.options.data || {},
        selected: [],
      }
    }
    */
    value: function componentWillMount() {
      var _props = this.props,
          options = _props.options,
          url = _props.options.url;

      if (url) {
        (0, _utils.get)(url, options).then(function (data) {
          console.log(data);
          /*
          this.setState({
            data,
          });
          */
        });
      }
    }
  }, {
    key: 'transformComponent',
    value: function transformComponent(children) {
      var _this2 = this;

      if (children) {
        return _react2.default.Children.map(children, function (child) {
          var props = child.props,
              _child$props = child.props,
              is = _child$props.is,
              className = _child$props.className;

          if (is && components[is]) {
            return _react2.default.createElement(components[is], props, _this2.transformComponent(props.children));
          }
          if (className == "Reftitle") {
            return _react2.default.createElement('div', props);
          }
          return _react2.default.cloneElement(child, props, _this2.transformComponent(props.children));
        });
      }
      return [];
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;

      return _react2.default.createElement(
        'div',
        null,
        this.transformComponent(children)
      );
    }
  }]);

  return Ref;
}(_react.Component);

Ref.propTypes = {
  children: _propTypes2.default.element.isRequired,
  options: _propTypes2.default.PropTypes.shape({})
};
Ref.defaultProps = {
  options: {}
};


Ref.RefList = _RefList2.default;
Ref.RefSearch = _RefSearch2.default;
Ref.RefButton = _RefButton2.default;
Ref.Tree = _Tree2.default;
Ref.RefTable = _RefTable2.default;
Ref.Tab = _Tab2.default;

exports.default = Ref;
module.exports = exports['default'];