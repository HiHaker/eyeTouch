'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _checkbox = require('../../bee/checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

var _loading = require('../../bee/loading');

var _loading2 = _interopRequireDefault(_loading);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RefList = function (_Component) {
	_inherits(RefList, _Component);

	function RefList(props) {
		_classCallCheck(this, RefList);

		var _this = _possibleConstructorReturn(this, (RefList.__proto__ || Object.getPrototypeOf(RefList)).call(this, props));

		_this.onDoubleClick = function (checkid) {
			var _this$props = _this.props,
			    data = _this$props.data,
			    isRadio = _this$props.isRadio;

			var selectArray = [];
			if (isRadio) {
				data.forEach(function (item, index) {
					if (item.refpk == checkid) {
						item.checked = !item.checked;
					} else {
						item.checked = false;
					}
					if (item.checked) {
						selectArray.push(item);
					}
				});
				_this.props.RefListChecked(selectArray);
				setTimeout(function () {
					_this.props.onClickBtn('save');
				}, 100);
			}
		};

		_this.changeCheck = function (checkid) {
			var _this$props2 = _this.props,
			    data = _this$props2.data,
			    isRadio = _this$props2.isRadio;

			var selectArray = [];
			if (isRadio) {
				data.forEach(function (item, index) {
					if (item.refpk == checkid) {
						item.checked = !item.checked;
					} else {
						item.checked = false;
					}
					if (item.checked) {
						selectArray.push(item);
					}
				});
			} else {
				data.forEach(function (item, index) {
					if (item.refpk == checkid) {
						item.checked = !item.checked;
					}
					if (item.checked) {
						selectArray.push(item);
					}
				});
			}
			_this.props.RefListChecked(selectArray);
		};

		_this.state = {
			dataList: []
		};
		return _this;
	}

	_createClass(RefList, [{
		key: 'componentWillMount',
		value: function componentWillMount() {}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    data = _props.data,
			    SelectArray = _props.SelectArray,
			    language = _props.language,
			    loading = _props.loading;

			var nodata = "没有查询到数据";
			switch (language) {
				case "zh_CN":
					nodata = '没有查询到数据';

					break;
				case "en_US":
					nodata = 'No query to data';
					break;
				case "zh_TW":
					nodata = '沒有査詢到數據';
					break;
				case "fr_FR":
					nodata = 'Pas de données';
					break;
				case "de_DE":
					nodata = 'Keine abfrage zu Daten';
					break;
				case "ja_JP":
					nodata = 'データが検索されていません';
					break;
				default:
					nodata = '没有查询到数据';
			}
			var loop = function loop(data) {
				return data.map(function (item, index) {
					item.checked = false;
					SelectArray.forEach(function (element) {
						if (item.refpk == element.refpk) {
							item.checked = true;
						}
					});
					return _react2.default.createElement(
						'div',
						{ className: 'List-checkbox', key: index },
						_react2.default.createElement(
							_checkbox2.default,
							{ colors: 'info', onDoubleClick: function onDoubleClick() {
									return _this2.onDoubleClick(item.refpk);
								}, checked: item.checked, onChange: function onChange() {
									return _this2.changeCheck(item.refpk);
								} },
							item.refname
						)
					);
				});
			};
			return _react2.default.createElement(
				'div',
				{ className: 'Ref-List' },
				_react2.default.createElement(
					'div',
					{ className: loading ? 'loading' : '' },
					data.length ? loop(data) : _react2.default.createElement(
						'div',
						{ className: 'Ref-nodata' },
						nodata
					)
				),
				_react2.default.createElement(_loading2.default, { container: this, show: loading })
			);
		}
	}]);

	return RefList;
}(_react.Component);

exports.default = RefList;
module.exports = exports['default'];