'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

require('./polyfill_shim.js');

var _RefTreeTable = require('./RefTreeTable');

var _RefTreeTable2 = _interopRequireDefault(_RefTreeTable);

var _RefTree = require('./RefTree');

var _RefTree2 = _interopRequireDefault(_RefTree);

var _RefTree3 = require('./RefTree2');

var _RefTree4 = _interopRequireDefault(_RefTree3);

var _RefTable = require('./RefTable');

var _RefTable2 = _interopRequireDefault(_RefTable);

var _RefGrid = require('./RefGrid');

var _RefGrid2 = _interopRequireDefault(_RefGrid);

var _RefTreeTransfer = require('./RefTreeTransfer');

var _RefTreeTransfer2 = _interopRequireDefault(_RefTreeTransfer);

var _RefMultipleTable = require('./RefMultipleTable');

var _RefMultipleTable2 = _interopRequireDefault(_RefMultipleTable);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RefGlobal = function (_Component) {
    _inherits(RefGlobal, _Component);

    function RefGlobal(props) {
        _classCallCheck(this, RefGlobal);

        var _this = _possibleConstructorReturn(this, (RefGlobal.__proto__ || Object.getPrototypeOf(RefGlobal)).call(this, props));

        _this.state = {
            checkedArray: _this.props.option.checkedArray,
            token: ''
        };
        return _this;
    }

    _createClass(RefGlobal, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var self = this;
            var option = this.props.option;
            var refType = option.refType,
                checkedArray = option.checkedArray;

            var tempCheckedArray = checkedArray;

            if (option.onBeforeAjax) {
                this.props.option.onBeforeAjax('begin');
            }
            //对checkedArray作判断
            function ajaxWrap(val) {
                var value = {};
                var url = option.refModelUrl.totalDataUrl || 'http://workbench.yyuap.com/ref/diwork/iref_ctr/matchPKRefJSON';
                (0, _utils.fetchJ)(url, _extends({}, option.param, {
                    pk_val: val
                    // token:window.sessionStorage.logincasYYuapRefToken
                }))
                // .then( (response) => { return JSON.parse(response); })
                .then(function (_ref) {
                    var data = _ref.data;

                    var checkedArray = data.filter(function (_ref2) {
                        var refpk = _ref2.refpk;

                        return tempCheckedArray.indexOf(refpk) > -1;
                    });
                    checkedArray = checkedArray.map(function (v, k) {
                        v.key = v.refpk;
                        return v;
                    });
                    self.setState({
                        checkedArray: checkedArray
                    });
                    // return checkedArray;
                }).catch(function () {
                    self.setState({
                        checkedArray: []
                    });
                });
            }
            if (!checkedArray || checkedArray == [] || checkedArray.length === 0) {
                checkedArray = [];
            } else {
                if (_typeof(checkedArray[0]) === 'object') {
                    //todo nothing
                } else {
                    checkedArray = checkedArray.toString();
                    ajaxWrap(checkedArray);
                }
            }
            document.addEventListener('keyup', function (event) {
                var e = event || window.event || arguments.callee.caller.arguments[0];
                if (e && e.keyCode == 27) {
                    // 按 Esc 关闭窗口
                    option.destory();
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var option = this.props.option;
            var checkedArray = this.state.checkedArray;

            option = Object.assign({}, option, { checkedArray: checkedArray });
            var realType = null;
            var _option = option,
                refType = _option.refType;


            var childComponent = {};
            switch (parseInt(refType)) {
                case 1:
                    childComponent = {
                        RefSearch: true,
                        isTab: false,
                        isTree: true,
                        RefButton: true
                    };
                    var option1 = Object.assign({}, childComponent, option);
                    realType = _react2.default.createElement(_RefTree2.default, { option: option1 });
                    break;
                case 2:
                    childComponent = {
                        RefSearch: true,
                        isTab: true,
                        isTable: true,
                        RefButton: true
                    };
                    var option2 = Object.assign({}, childComponent, option);
                    realType = _react2.default.createElement(_RefTable2.default, { option: option2 });
                    break;
                case 3:
                    childComponent = {
                        RefSearch: true,
                        isTab: true,
                        isTree: true,
                        isTable: true,
                        RefButton: true
                    };
                    var option3 = Object.assign({}, childComponent, option);
                    realType = _react2.default.createElement(_RefTreeTable2.default, { option: option3 });
                    break;
                case 4:
                    childComponent = {
                        RefSearch: true,
                        RefList: true,
                        RefButton: true
                    };
                    var option4 = Object.assign({}, childComponent, option);
                    realType = _react2.default.createElement(_RefGrid2.default, { option: option4 });
                    break;
                case 5:
                    var option5 = Object.assign({}, option);
                    realType = _react2.default.createElement(_RefTreeTransfer2.default, { option: option5 });
                    break;
                case 6:
                    var option6 = Object.assign({}, option);
                    realType = _react2.default.createElement(_RefMultipleTable2.default, { option: option6 });
                    break;
                case 7:
                    childComponent = {
                        RefSearch: true,
                        isTab: false,
                        isTree: true,
                        RefButton: true
                    };
                    var option7 = Object.assign({}, childComponent, option);
                    realType = _react2.default.createElement(_RefTree4.default, { option: option7 });
                    break;
                default:
                    childComponent = {
                        RefSearch: true,
                        isTab: true,
                        isTree: true,
                        isTable: true,
                        RefButton: true
                    };
                    var option4 = Object.assign({}, childComponent, option);
                    realType = _react2.default.createElement(_RefTreeTable2.default, { option: option4 });
            }
            return _react2.default.createElement(
                'div',
                null,
                realType
            );
        }
    }]);

    return RefGlobal;
}(_react.Component);

exports.default = RefGlobal;
module.exports = exports['default'];