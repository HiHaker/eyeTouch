'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _refWithInput = require('../refWithInput');

var _refWithInput2 = _interopRequireDefault(_refWithInput);

var _form = require('../bee/form');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var option = {
    refType: 5, //1:树形 2.单表 3.树卡型 4.多选 5.default
    className: '',
    param: { //url请求参数
        refCode: 'common_ref',
        transmitParam: 'EXAMPLE_CONTACTS,EXAMPLE_ORGANIZATION'
    },
    refModelUrl: {
        TreeUrl: '/rest', //树请求
        TableBodyUrl: '/tablebody', //表体请求
        TableBarUrl: '/tablebar' //表头请求
    },
    filterRefUrl: '/iuap_pap_quickstart/filterRef', //get
    keyList: [], //选中的key
    // checkedArray: [],
    onCancel: function onCancel(p) {
        console.log(p);
    },
    onSave: function onSave(sels) {
        console.log(sels);
    },
    filterKey: [{ title: '人员名称', key: 'peoname' }, { title: '人员名称', key: 'peoname' }, { title: '人员名称', key: 'peoname' }, { title: '人员名称', key: 'peoname' }, { title: '人员名称', key: 'peoname' }, { title: '人员名称', key: 'peoname' }, { title: '人员名称', key: 'peoname' }, { title: '人员名称', key: 'peoname' }, { title: '人员名称', key: 'peoname' }, { title: '人员名称', key: 'peoname' }, { title: '人员名称', key: 'peoname' }],
    textOption: {
        modalTitle: '选择品类',
        leftTitle: '品类结构',
        rightTitle: '品类列表',
        leftTransferText: '待选品类',
        rightTransferText: '已选品类',
        leftInfo: [{ text: '流水号', key: 'refname' }, { text: '品类编码', key: 'refname' }, { text: '品类描述', key: 'peoname' }],
        rightInfo: [{ text: '流水号', key: 'refname' }, { text: '品类编码', key: 'refname' }, { text: '品类描述', key: 'peoname' }]
    },
    showKey: 'peoname',
    verification: true, //是否进行校验
    verKey: 'aaaa', //校验字段
    verVal: ''
};

var TestForm = function (_Component) {
    _inherits(TestForm, _Component);

    function TestForm(props) {
        _classCallCheck(this, TestForm);

        return _possibleConstructorReturn(this, (TestForm.__proto__ || Object.getPrototypeOf(TestForm)).call(this, props));
    }

    _createClass(TestForm, [{
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(_refWithInput2.default, { option: option, disabled: true, form: this.props.form })
            );
        }
    }]);

    return TestForm;
}(_react.Component);

var TestFormWrap = _form2.default.createForm()(TestForm);

_reactDom2.default.render(_react2.default.createElement(TestFormWrap, null), document.getElementById('root'));