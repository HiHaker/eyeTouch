'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTreeTableData = exports.getTree = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('../utils');

// 树卡型 树的数据接口

var getTree = exports.getTree = function getTree(url, _ref) {
  var type = _ref.type,
      param = _ref.param;
  return (0, _utils.fetchJ)(url, _extends({}, param, {
    refShowClassCode: type
  }));
};

var getTableBar = function getTableBar(url, _ref2) {
  var param = _ref2.param;
  return (0, _utils.fetchJ)(url, _extends({}, param));
};
var getTableBody = function getTableBody(url, _ref3) {
  var param = _ref3.param,
      _ref3$activepage = _ref3.activepage,
      activepage = _ref3$activepage === undefined ? 0 : _ref3$activepage,
      _ref3$activekey = _ref3.activekey,
      activekey = _ref3$activekey === undefined ? null : _ref3$activekey,
      _ref3$searchvalue = _ref3.searchvalue,
      searchvalue = _ref3$searchvalue === undefined ? '' : _ref3$searchvalue,
      key = _ref3.key;
  return (0, _utils.fetchJ)(url, _extends({}, param, {
    'refClientPageInfo.currPageIndex': activepage,
    content: searchvalue,
    condition: key
  }));
};
var getTreeTableData = exports.getTreeTableData = function getTreeTableData(url, url2, value) {
  return Promise.all([getTableBar(url, value), getTableBody(url2, value)]);
};